// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "Packages/jp.keijiro.noiseshader/Shader/ClassicNoise2D.hlsl"

#define INITIAL_WEIGHT 0.5
#define NOISE_FUNC(coord, period) cnoise(coord)
float4 color;
float2 windDir;
float time;
float frequency;
float scl;
float2 objectPos, bottomLeft, boundsSize;
float radius;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

[numthreads(32,32, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{

	const float epsilon = 0.0001;

	float2 uvSCL = id.xy * scl;

	float2 uv = uvSCL + (float2(windDir.x, windDir.y) * time * frequency);
	float o = 0.5;
	float o2 = 0.5;
	float s = 1;
	float s2 = 1.5;
	float w = INITIAL_WEIGHT;

	float2 coord = uv * s;
	float2 period = s * 2.0;
	o += NOISE_FUNC(coord, period) * w;
	coord = uv * s2;
	period = s2 * 2.0;
	o2 += NOISE_FUNC(coord, period) * w;

	s *= 2.0;
	w *= 0.5;


	float2 pos = objectPos.xy;
	float posX = objectPos.x;
	posX -= bottomLeft.x;
	posX /= boundsSize.x;	
	float posY = objectPos.y;
	posY -= bottomLeft.y;
	posY /= boundsSize.y;


	float distX = (1 - posX) - (id.x / (float)512);
	float distY = (1 - posY) - (id.y / (float)512);
	float dist = sqrt(pow(distX, 2) + pow(distY, 2));
	float3 color;

	if (dist < radius) {
		color = float3(1 - (dist/radius), o,o2);
	}
	else {
		color = float3(0, o, o2);
	}


	//    float ns = snoise(i.xyz) / 2 + 0.5f;

	Result[id.xy] = float4(color, 1);// *color;
}
